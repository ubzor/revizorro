// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  // prismaUtils = true
}

model User {
  id String @id @default(uuid())

  email                 String  @unique
  hashedPassword        String
  registrationConfirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions          Session[]
  confirmationCodes ConfirmationCode[]
  operations        Operation[]
}

model Session {
  id String @id @default(uuid())

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model ConfirmationCodeType {
  id String @id @default(uuid())

  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  confirmationCodes ConfirmationCode[]
}

model ConfirmationCode {
  id String @id @default(uuid())

  userId String
  typeId String
  code   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user User                 @relation(references: [id], fields: [userId], onDelete: Cascade)
  type ConfirmationCodeType @relation(references: [id], fields: [typeId], onDelete: Cascade)
}

model Sku {
  id String @id @default(uuid())

  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks          Stock[]
  operationStocks OperationStock[]
}

model Storage {
  id String @id @default(uuid())

  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks              Stock[]
  operationStocksFrom OperationStock[] @relation("operationStockFrom")
  operationStocksTo   OperationStock[] @relation("operationStockTo")
}

model Stock {
  id String @id @default(uuid())

  skuId     String
  storageId String
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sku     Sku     @relation(references: [id], fields: [skuId], onDelete: Cascade)
  storage Storage @relation(references: [id], fields: [storageId], onDelete: Cascade)
}

model OperationType {
  id String @id @default(uuid())

  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  operations Operation[]
}

model OperationStock {
  id String @id @default(uuid())

  skuId         String
  fromStorageId String?
  toStorageId   String?
  operationId   String
  quantity      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sku         Sku       @relation(references: [id], fields: [skuId], onDelete: Cascade)
  fromStorage Storage?  @relation("operationStockFrom", references: [id], fields: [fromStorageId], onDelete: Cascade)
  toStorage   Storage?  @relation("operationStockTo", references: [id], fields: [toStorageId], onDelete: Cascade)
  operation   Operation @relation(references: [id], fields: [operationId], onDelete: Cascade)
}

model Operation {
  id String @id @default(uuid())

  typeId String
  userId String

  operationStocks OperationStock[]
  user            User             @relation(references: [id], fields: [userId], onDelete: Cascade)

  type OperationType @relation(references: [id], fields: [typeId], onDelete: Cascade)
}
